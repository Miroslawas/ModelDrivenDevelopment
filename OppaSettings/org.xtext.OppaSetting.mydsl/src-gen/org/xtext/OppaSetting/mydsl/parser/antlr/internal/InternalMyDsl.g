/*
* generated by Xtext
*/
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.OppaSetting.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.OppaSetting.mydsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.OppaSetting.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;
 	
    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "SettingsModel";	
   	}
   	
   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleSettingsModel
entryRuleSettingsModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSettingsModelRule()); }
	 iv_ruleSettingsModel=ruleSettingsModel 
	 { $current=$iv_ruleSettingsModel.current; } 
	 EOF 
;

// Rule SettingsModel
ruleSettingsModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSettingsModelAccess().getSettingsModelAction_0(),
            $current);
    }
)	otherlv_1='SettingsModel \n\t{\n\t\t' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSettingsModelAccess().getSettingsModelKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSettingsModelAccess().getSectionsSectionParserRuleCall_2_0()); 
	    }
		lv_sections_2_0=ruleSection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSettingsModelRule());
	        }
       		add(
       			$current, 
       			"sections",
        		lv_sections_2_0, 
        		"Section");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_3='}\n' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSettingsModelAccess().getRightCurlyBracketLineFeedLfKeyword_3());
    }
)
;





// Entry rule entryRuleSection
entryRuleSection returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSectionRule()); }
	 iv_ruleSection=ruleSection 
	 { $current=$iv_ruleSection.current; } 
	 EOF 
;

// Rule Section
ruleSection returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSectionAccess().getSectionAction_0(),
            $current);
    }
)	otherlv_1='Section\n\t\t\t{\n\t\t\t\t name= ' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSectionAccess().getSectionNameKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSectionAccess().getNameEStringParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSectionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='\n\t\t\t\t ' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSectionAccess().getLineFeedLfCharacterTabulationCharacterTabulationCharacterTabulationCharacterTabulationSpaceKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSectionAccess().getFeaturesFeatureParserRuleCall_3_1_0()); 
	    }
		lv_features_4_0=ruleFeature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSectionRule());
	        }
       		add(
       			$current, 
       			"features",
        		lv_features_4_0, 
        		"Feature");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_5='} \n' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSectionAccess().getRightCurlyBracketSpaceLineFeedLfKeyword_4());
    }
)
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleFeature
entryRuleFeature returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeatureRule()); }
	 iv_ruleFeature=ruleFeature 
	 { $current=$iv_ruleFeature.current; } 
	 EOF 
;

// Rule Feature
ruleFeature returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFeatureAccess().getFeatureAction_0(),
            $current);
    }
)	otherlv_1='Feature\n\t\t\t\t\t' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFeatureAccess().getFeatureKeyword_1());
    }
	otherlv_2='{\n\t\t\t\t\t\t name= ' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFeatureAccess().getNameKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureAccess().getNameEStringParserRuleCall_3_0()); 
	    }
		lv_name_3_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFeatureAccess().getLeftCurlyBracketKeyword_4());
    }
(	otherlv_5='id' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFeatureAccess().getIdKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureAccess().getIdEStringParserRuleCall_5_1_0()); 
	    }
		lv_id_6_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureRule());
	        }
       		set(
       			$current, 
       			"id",
        		lv_id_6_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_7='description' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFeatureAccess().getDescriptionKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureAccess().getDescriptionEStringParserRuleCall_6_1_0()); 
	    }
		lv_description_8_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureRule());
	        }
       		set(
       			$current, 
       			"description",
        		lv_description_8_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_9='type' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getFeatureAccess().getTypeKeyword_7_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureAccess().getTypeTypeParserRuleCall_7_1_0()); 
	    }
		lv_type_10_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_10_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_11='excludes' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getFeatureAccess().getExcludesKeyword_8_0());
    }
	otherlv_12='(' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getFeatureAccess().getLeftParenthesisKeyword_8_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFeatureRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFeatureAccess().getExcludesFeatureCrossReference_8_2_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_14=',' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getFeatureAccess().getCommaKeyword_8_3_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFeatureRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFeatureAccess().getExcludesFeatureCrossReference_8_3_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_16=')' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getFeatureAccess().getRightParenthesisKeyword_8_4());
    }
)?(	otherlv_17='depends' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getFeatureAccess().getDependsKeyword_9_0());
    }
	otherlv_18='(' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getFeatureAccess().getLeftParenthesisKeyword_9_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFeatureRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFeatureAccess().getDependsFeatureCrossReference_9_2_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_20=',' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getFeatureAccess().getCommaKeyword_9_3_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFeatureRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFeatureAccess().getDependsFeatureCrossReference_9_3_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_22=')' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getFeatureAccess().getRightParenthesisKeyword_9_4());
    }
)?	otherlv_23='}' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getFeatureAccess().getRightCurlyBracketKeyword_10());
    }
)
;





// Entry rule entryRuleType
entryRuleType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); } 
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current.getText(); }  
	 EOF 
;

// Rule Type
ruleType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='Type' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeAccess().getTypeKeyword()); 
    }

    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


